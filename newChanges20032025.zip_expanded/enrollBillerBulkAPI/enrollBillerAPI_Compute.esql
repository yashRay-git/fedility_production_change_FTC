PATH Fidelity_Bank_GhIPSS_Common,com.fidilitybank.co.zw.common.esql;
DECLARE cbsURL,ghIPSSURL,callBackURL,enrollInstitutionId EXTERNAL CHARACTER '';

CREATE COMPUTE MODULE enrollBillerAPI_Bulk_Compute_ProcessRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		call setChannelResponse();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE rtpData ROW;
		DECLARE rc BOOLEAN;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		CREATE FIELD Environment.values;
		DECLARE envValRef REFERENCE TO Environment.values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.msgId = inRef.file.data.Item.billerId;
		--following line is to refer as a msg id in a channel response logging start
		SET envValRef.chnlReqMsgId = inRef.file.data.Item.billerId;
		--following line is to refer as a msg id in a channel response logging end
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		
		--Logging code Start		
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--Logging code End
		
		
		CREATE LASTCHILD OF Environment.Request NAME 'values';
		CREATE LASTCHILD OF Environment.Request.values NAME 'bulk';
		DECLARE envRef REFERENCE TO Environment.Request.values.*[>];
		
		
		
		DECLARE dataRef REFERENCE TO inRef.file.data.Item;
			WHILE LASTMOVE(dataRef) DO
				SET envRef.{dataRef.billerId}.billerId = dataRef.billerId;
				SET envRef.{dataRef.billerId}.accountNumber = dataRef.accountNumber;
				SET envRef.{dataRef.billerId}.requestSource = dataRef.requestSource;
				
				SET OutputRoot.JSON.Data.operation = 'limiteddetail';
				SET OutputRoot.JSON.Data.accountNo = dataRef.accountNumber;
				
				SET Environment.Request.values.requestFlag = 'CBSCall_Blk';
				
				--Logging code Start
				SET envValRef.msgId = dataRef.billerId;
				SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
				CALL prepareGhIPSSLogger('CBSRequest',envValRef,OutputRoot);
				--Logging code End
				
				SET OutputLocalEnvironment.Destination.HTTP.RequestURL = cbsURL;
				SET Environment.requestIndex = dataRef.billerId;
				PROPAGATE TO TERMINAL 'out1';
				
				IF FIELDVALUE(envRef.{Environment.requestIndex}.status_cbs) = 200  THEN
					CALL setRequestForGhIPSSCall();
				END IF;
			
			--Insert into RTP Database start
				SET rtpData.Values = envRef.{Environment.requestIndex};
				CALL rtpCall(rtpData.Values);
				CALL writeToLogFile(ApplicationLabel, 'RawLogger', 'DEBUG','Inserted into BILLERS in RTP database with billerId' ||CAST(envRef.{Environment.requestIndex}.billerId AS CHARACTER)) INTO rc;
			--Insert into RTP Database end
			
				MOVE dataRef NEXTSIBLING;
			END WHILE;
		
	END;
	CREATE PROCEDURE setRequestForGhIPSSCall ( )
	BEGIN
		DECLARE envRef REFERENCE TO Environment.Request.values;
		DECLARE envValRef REFERENCE TO Environment.values;
		DECLARE requestType ROW;
		SET requestType.fieldName = FIELDNAME(envRef.*[>]);
		IF CONTAINS(requestType.fieldName,'bulk') THEN
			SET OutputRoot.JSON.Data.institutionId = enrollInstitutionId;
			SET OutputRoot.JSON.Data.billerId = envRef.bulk.{Environment.requestIndex}.billerId;
			SET OutputRoot.JSON.Data.name = envRef.bulk.{Environment.requestIndex}.name;
			SET OutputRoot.JSON.Data.accountNumber = envRef.bulk.{Environment.requestIndex}.accountNumber;
			SET OutputRoot.JSON.Data.branchCode = envRef.bulk.{Environment.requestIndex}.branchCode;
			SET OutputRoot.JSON.Data.requestSource = envRef.bulk.{Environment.requestIndex}.requestSource;
			SET OutputRoot.JSON.Data.callBackUrl = callBackURL;
			SET OutputRoot.JSON.Data.requestTimestamp = CURRENT_TIMESTAMP;
			SET OutputRoot.JSON.Data.requestSignature = 'o9ve3a5YR5I99c0iSd3zaJowAsDzGuTNl2yfDS95XhT64JrhJV5vzy1xhy7x5Y10rycbpmLp1wgdRw8ugzdlRvP6';
			SET Environment.Request.values.requestFlag = 'GhIPSSCall_Blk';
		END IF;
				
--		DECLARE jsonReq CHARACTER CAST(ASBITSTREAM(OutputRoot.JSON.Data CCSID InputRoot.Properties.CodedCharSetId)AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
--		CALL signature (jsonReq) INTO OutputRoot.JSON.Data.requestSignature;
		
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('GhiPSSRequest',envValRef,OutputRoot);
		--Logging code End
		
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = ghIPSSURL;
		PROPAGATE TO TERMINAL 'out1';
	END;
		
	CREATE PROCEDURE setChannelResponse ( )
	BEGIN
		DECLARE envRef REFERENCE TO Environment.Request.values.bulk.*[>];
		DECLARE envValRef REFERENCE TO Environment.values;
		CREATE LASTCHILD OF OutputRoot.JSON.Data IDENTITY (JSON.Array)enrollment; 

		DECLARE outItemRef REFERENCE TO OutputRoot.JSON.Data.enrollment;
		DECLARE i INTEGER 1;
		
		WHILE LASTMOVE(envRef) DO
			SET outItemRef.Item[i].billerId = envRef.billerId;
			SET outItemRef.Item[i].errorCode = envRef.errorCode;
			SET outItemRef.Item[i].errorDescription = envRef.errorDescription;
			SET i = i+1;
			MOVE envRef NEXTSIBLING;
		END WHILE;
		
		--Logging code Start
			SET envValRef.msgId = envValRef.chnlReqMsgId;
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
		--Logging code End
	END;
END MODULE;

CREATE COMPUTE MODULE enrollBillerAPI_Bulk_Compute_ProcessResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE headerRef REFERENCE TO InputRoot.HTTPResponseHeader;
		DECLARE statusRef REFERENCE TO headerRef."X-Original-HTTP-Status-Code";
		DECLARE envValRef REFERENCE TO Environment.values;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		DECLARE envRef REFERENCE TO Environment.Request.values;
		DECLARE dataRef REFERENCE TO envRef.bulk.{Environment.requestIndex};
		
		IF CONTAINS(envRef.requestFlag,'CBSCall') AND statusRef = 200 THEN
			
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('CBSResponse',envValRef,OutputRoot);
			--Logging code End
			
			IF envRef.requestFlag = 'CBSCall_Blk' THEN
				SET dataRef.name = inRef.customerName1;
				SET dataRef.accountNumber = inRef.custAccNo;
				SET dataRef.branchCode = inRef.branchCode;
				SET dataRef.status_cbs = 200;
				SET dataRef.statusDesc_cbs = 'success';
			END IF;
			
		ELSEIF CONTAINS(envRef.requestFlag,'GhIPSSCall') AND statusRef = 200 THEN
			
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('GhIPSSResponse',envValRef,OutputRoot);
			--Logging code End
			
			IF envRef.requestFlag = 'GhIPSSCall_Blk' THEN
				SET dataRef.errorCode = inRef.errorCode;
				SET dataRef.errorDescription = inRef.errorDescription;
				SET dataRef.status_ghipss = 200;
				SET dataRef.statusDesc_ghipss = inRef.errorDescription;
			END IF;
		ELSE
			IF envRef.requestFlag = 'CBSCall_Blk' THEN
				SET envRef.bulk.{Environment.requestIndex}.status_cbs = statusRef;
			ELSEIF envRef.requestFlag = 'GhIPSSCall_Blk' THEN
				SET envRef.bulk.{Environment.requestIndex}.status_ghipss = statusRef;
			END IF;
		END IF;
	END;
END MODULE;

	CREATE PROCEDURE rtpCall (IN envReqVal REFERENCE)
	BEGIN
				INSERT INTO Database.BILLERS (billerId,
											  institutionId,
											  name,
											  accountNumber,
											  branchcode,
											  callbackurl,
											  requestsource,
											  ghipss_status,
											  ghipss_statusdescription,
											  cbs_status,
											  cbs_statusdescription,
											  statuscode,
											  statusdescription,
											  requesttimestamp)
							VALUES (envReqVal.billerId,
									enrollInstitutionId,
									envReqVal.name,
									envReqVal.accountNumber,
									envReqVal.branchCode, 
									callBackURL,
									envReqVal.requestSource,
									envReqVal.status_ghipss,
									envReqVal.statusDesc_ghipss,
									envReqVal.status_cbs,
									envReqVal.statusDesc_cbs,
									envReqVal.errorCode,
									envReqVal.errorDescription,
									current_timestamp);				
		
	END;