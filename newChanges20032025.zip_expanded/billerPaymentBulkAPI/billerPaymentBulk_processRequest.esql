PATH Fidelity_Bank_GhIPSS_Common, com.fidilitybank.co.zw.common.esql;

CREATE COMPUTE MODULE billerPaymentBulk_processRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		CALL CopyEntireMessage();
		
		RETURN TRUE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN

		CREATE FIELD Environment.values;
		DECLARE resStatusCode CHARACTER;
		DECLARE envValRef REFERENCE TO Environment.values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.msgId = InputRoot.JSON.Data.transactions.Item.billerId;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--Logging code End

		DECLARE inreq REFERENCE TO InputRoot.JSON.Data.transactions.[1];
		DECLARE digitalSign CHARACTER;
		DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;

		IF FIELDNAME(InputRoot.JSON.Data.transactions) is not null THEN
			WHILE LASTMOVE(inreq) DO
				DECLARE jsonReq CHARACTER CAST(ASBITSTREAM(inreq CCSID InputRoot.Properties.CodedCharSetId)AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
				SET envValRef.msgId = inreq.billerId;
				-- CALL signature (jsonReq) INTO digitalSign;
				SET OutputRoot.JSON.Data = inreq;
				SET OutputRoot.JSON.Data.requestSignature = 'NNkX0tePGViveWFX79n/+O43yz5lKQakk+eLKPmi7ANd+JKpkFIKR5iVO3CyFo/1qAioXLy9MIP+snGURA31kaa2tOy1AsUG0YQx3ltkxDrybmzPswZRYHI9hfwW0e4HNoApS9D1IYEZNGWcuMgNHyDs+Nb4bCZAwNShuY523W0=';
				SET Environment.GipsRequest = OutputRoot.JSON.Data;
				--Logging code Start
				SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
				CALL prepareGhIPSSLogger('GHiPSSRequest',envValRef,OutputRoot);
				--Logging code End
				PROPAGATE TO TERMINAL 'out1';
				DECLARE dataRef REFERENCE TO Environment.ChannelResponse;
				DECLARE envRef REFERENCE TO Environment.GipsRequest;
				IF RIGHT(dataRef.{envRef.billerId}.errorCode,3) = '420' THEN
					DECLARE rc BOOLEAN;
					CALL biller_payment_bulk(envRef);
					CALL writeToLogFile(MessageFlowLabel, 'RawLogger', 'DEBUG','Inserted into BILLER_PAYMENT in RTP database with billerId' ||CAST(envRef.billerId AS CHARACTER)) INTO rc;
				END IF;
				MOVE inreq NEXTSIBLING;
			END WHILE;
			-- IF LASTMOVE(inreq) = False THEN

			CREATE FIELD OutputRoot.JSON.Data;
			DECLARE outref REFERENCE TO OutputRoot.JSON.Data;
			CREATE LASTCHILD OF OutputRoot.JSON.Data IDENTITY(JSON.Array)billerpayment;
			DECLARE i INTEGER 1;

			DECLARE channlresp REFERENCE TO Environment.ChannelResponse.[1];

			WHILE LASTMOVE(channlresp) DO
				SET outref.billerpayment.Item[i].billerId = channlresp.billerId;
				SET outref.billerpayment.Item[i].billId = channlresp.billId;
				SET outref.billerpayment.Item[i].status = channlresp.status;
				SET outref.billerpayment.Item[i].errorCode = channlresp.errorCode;
				IF channlresp.statusCode = '420' THEN
					SET resStatusCode = '420';
				ELSEIF Environment.GipsRequest.statusCode = '200' THEN
					IF resStatusCode = '420' THEN
						SET resStatusCode = '420';
					END IF;		
				END IF;
				SET outref.billerpayment.Item[i].errorDescription = channlresp.errorDescription;
				SET i = i + 1;
				MOVE channlresp NEXTSIBLING;
			END WHILE;
			SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = COALESCE(resStatusCode,Environment.GipsRequest.statusCode);
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
			--Logging code End
--			PROPAGATE TO TERMINAL 'out1';
			-- CALL biller_payment_bulk(envRef);
			-- CALL writeToLogFile(MessageFlowLabel, 'RawLogger', 'DEBUG','Inserted into BILLER_PAYMENT in RTP database with billerId' ||CAST(envRef.billerId AS CHARACTER)) INTO rc;
			-- propagate to terminal 'out';
			-- END IF;
		END IF;
	END;
END MODULE;

CREATE COMPUTE MODULE billerPaymentBulk_processResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE Gippsresp REFERENCE TO InputRoot.JSON.Data;
		DECLARE envRef REFERENCE TO Environment.GipsRequest;
		DECLARE envValRef REFERENCE TO Environment.values;
		SET envRef.errorCode = Gippsresp.errorCode;
		SET envRef.errorDescription = Gippsresp.errorDescription;
		IF Gippsresp.errorCode = '200' THEN
			SET envRef.status = 'Success';
			CALL biller_payment_bulk(envRef);

			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('GHiPSSResponse',envValRef,OutputRoot);
			--Logging code End
			DECLARE rc BOOLEAN;
			CALL writeToLogFile(MessageFlowLabel, 'RawLogger', 'DEBUG','Inserted into BILLER_PAYMENT in RTP database with billerId' ||CAST(envRef.billerId AS CHARACTER)) INTO rc;
		ELSE
			-- SET Environment.errorcode = Gippsresp.errorCode;
			SET envRef.status = envRef.errorCode || ' ' || envRef.errorDescription;
			CALL biller_payment_bulk(envRef);
			-- INSERT INTO Database.BILLER_PAYMENT (
			-- BILLID, BILLERID, BILLDATE, BILLAMOUNT, PAYERINSTITUTIONID, PAYERACCOUNTNUMBER, PAYERNAME,
			-- BILLDESCRIPTION, STATUS, REQUESTTIMESTAMP, ERRORCODE, ERRORDESCRIPTION
			-- )
			-- VALUES (
			-- envRef.billId , envRef.billerId , envRef.billDate , envRef.billAmount , envRef.payerInstitutionId ,envRef.payerAccountNumber ,
			-- envRef.payerName , envRef.billDescription ,envRef.status ,envRef.requestTimestamp ,envRef.errorCode ,envRef.errorDescription
			-- );
			DECLARE rc BOOLEAN;
			CALL writeToLogFile(MessageFlowLabel, 'RawLogger', 'DEBUG','Inserted into BILLER_PAYMENT in RTP database with billerId' ||CAST(envRef.billerId AS CHARACTER)) INTO rc;
		END IF;
		SET Environment.ChannelResponse.{envRef.billerId}.billerId = envRef.billerId;  
		SET Environment.ChannelResponse.{envRef.billerId}.billId = envRef.billId;
		SET Environment.ChannelResponse.{envRef.billerId}.errorCode = Gippsresp.errorCode;
		SET Environment.ChannelResponse.{envRef.billerId}.errorDescription = Gippsresp.errorDescription;


	END;
END MODULE;
--CREATE PROCEDURE signature ( In Request CHARACTER) RETURNS CHARACTER
--LANGUAGE JAVA
--EXTERNAL NAME "digitalSignature.JSONSignature.digitalSign";

CREATE PROCEDURE biller_payment_bulk (IN envRef REFERENCE )
BEGIN
	INSERT INTO Database.BILLER_PAYMENT (
	BILLID, BILLERID, BILLDATE, BILLAMOUNT, PAYERINSTITUTIONID, PAYERACCOUNTNUMBER, PAYERNAME,
	BILLDESCRIPTION, STATUS, REQUESTTIMESTAMP, ERRORCODE, ERRORDESCRIPTION
	)
	VALUES (
	envRef.billId , envRef.billerId , envRef.billDate , envRef.billAmount , envRef.payerInstitutionId ,envRef.payerAccountNumber ,
	envRef.payerName , envRef.billDescription ,envRef.status ,envRef.requestTimestamp ,envRef.errorCode ,envRef.errorDescription
	);
END;