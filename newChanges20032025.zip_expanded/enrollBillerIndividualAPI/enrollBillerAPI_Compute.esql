PATH Fidelity_Bank_GhIPSS_Common,com.fidilitybank.co.zw.common.esql;
DECLARE cbsURL,ghIPSSURL,callBackURL,enrollInstitutionId EXTERNAL CHARACTER '';


CREATE COMPUTE MODULE enrollBillerAPI_Compute_ProcessRequest
	
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		DECLARE errCode CHARACTER OutputRoot.JSON.Data.errorCode;
		IF CONTAINS(errCode,'420') THEN
				SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = 420;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		CREATE FIELD Environment.values;
		DECLARE logEntry CHARACTER;
		DECLARE rc BOOLEAN;
		SET logEntry = COALESCE(InputRoot.JSON.Data.billerId , InputRoot.JSON.Data.institutionId);
		
		DECLARE envValRef REFERENCE TO Environment.values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.msgId = InputRoot.JSON.Data.billerId;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		--Logging code End

			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
	
		--Logging code Start		
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--Logging code End
		
		CREATE LASTCHILD OF Environment.Request NAME 'values';
		CREATE LASTCHILD OF Environment.Request.values NAME 'individual';
		DECLARE envRef REFERENCE TO Environment.Request.values.*[>];
		
		--framing Core banking request
		SET OutputRoot.JSON.Data.operation = 'limiteddetail';
		SET OutputRoot.JSON.Data.accountNo = InputRoot.JSON.Data.accountNumber;
		
		SET envRef.billerId = InputRoot.JSON.Data.billerId;
		SET envRef.requestSource = InputRoot.JSON.Data.requestSource;
		SET Environment.Request.values.requestFlag = 'CBSCall_Ind';
		
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('CBSRequest',envValRef,OutputRoot);
		--Logging code End
		
--		SET OutputRoot.HTTPRequestHeader."X-Original-HTTP-URL" = cbsURL;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = cbsURL;
		PROPAGATE TO TERMINAL 'out1';
		
		IF FIELDVALUE(envRef.status_cbs)='200' THEN
			CALL setRequestForGhIPSSCall();
		END IF;
		
		CALL rtpCall(envRef);
		
		CALL writeToLogFile(ApplicationLabel, 'RawLogger', 'DEBUG','Inserted into BILLERS in RTP database with billerId' ||CAST(envRef.billerId AS CHARACTER)) INTO rc;
		SET OutputRoot.JSON.Data.errorCode = envRef.errorCode;
		SET OutputRoot.JSON.Data.errorDescription = COALESCE(envRef.statusDesc_ghipss,envRef.statusDesc_cbs);
		
		--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
		--Logging code End
		
	END;
	CREATE PROCEDURE setRequestForGhIPSSCall ( )
	BEGIN
		DECLARE envValRef REFERENCE TO Environment.values;
		DECLARE envRef REFERENCE TO Environment.Request.values;
		DECLARE requestType ROW;
		SET requestType.fieldName = FIELDNAME(envRef.*[>]);
		IF CONTAINS(requestType.fieldName,'individual') THEN
			SET OutputRoot.JSON.Data.institutionId = enrollInstitutionId;
			SET OutputRoot.JSON.Data.billerId = envRef.individual.billerId;
			SET OutputRoot.JSON.Data.name = envRef.individual.name;
			SET OutputRoot.JSON.Data.accountNumber = envRef.individual.accountNumber;
			SET OutputRoot.JSON.Data.branchCode = envRef.individual.branchCode;
			SET OutputRoot.JSON.Data.requestSource = envRef.individual.requestSource;
			SET OutputRoot.JSON.Data.callBackUrl = callBackURL;
			SET OutputRoot.JSON.Data.requestTimestamp = CURRENT_TIMESTAMP;
			SET OutputRoot.JSON.Data.requestSignature = 'o9ve3a5YR5I99c0iSd3zaJowAsDzGuTNl2yfDS95XhT64JrhJV5vzy1xhy7x5Y10rycbpmLp1wgdRw8ugzdlRvP6';
			SET Environment.Request.values.requestFlag = 'GhIPSSCall_Ind';
		END IF;

--		DECLARE jsonReq CHARACTER CAST(ASBITSTREAM(OutputRoot.JSON.Data CCSID InputRoot.Properties.CodedCharSetId)AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
--		CALL signature (jsonReq) INTO OutputRoot.JSON.Data.requestSignature;
		
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('GhiPSSRequest',envValRef,OutputRoot);
		--Logging code End
		
--		SET OutputRoot.HTTPRequestHeader."X-Original-HTTP-URL" = ghIPSSURL;
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = ghIPSSURL;
		PROPAGATE TO TERMINAL 'out1';
	END;

END MODULE;

CREATE COMPUTE MODULE enrollBillerAPI_Compute_ProcessResponse
	DECLARE payloadData ROW;
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE headerRef REFERENCE TO InputRoot.HTTPResponseHeader;
		DECLARE statusRef REFERENCE TO headerRef."X-Original-HTTP-Status-Code";
		DECLARE envValRef REFERENCE TO Environment.values;
		DECLARE envRef REFERENCE TO Environment.Request.values;
		DECLARE inRef REFERENCE TO InputRoot.JSON.Data;
		
		IF CONTAINS(envRef.requestFlag,'CBSCall')THEN
			
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('CBSResponse',envValRef,OutputRoot);
			--Logging code End
			
--			IF envRef.requestFlag = 'CBSCall_Ind' THEN
			IF  statusRef = 200  THEN
				SET envRef.individual.name = inRef.customerName1;
				SET envRef.individual.accountNumber = inRef.custAccNo;
				SET envRef.individual.branchCode = inRef.branchCode;
				SET envRef.individual.status_cbs = 200;
				SET envRef.individual.statusDesc_cbs = 'Success'; 
			ELSE
				SET envRef.individual.status_cbs = statusRef;
				
			END IF;
				
--			END IF;

		ELSEIF CONTAINS(envRef.requestFlag,'GhIPSSCall') THEN
			
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('GhIPSSResponse',envValRef,OutputRoot);
			--Logging code End
			
			IF  statusRef = 200  THEN
				SET envRef.individual.status_ghipss = inRef.errorCode;
				SET envRef.individual.errorCode = inRef.errorCode;
			--	SET envRef.individual.errorDescription = inRef.errorDescription;
			    SET envRef.individual.errorDescription = 'Transaction processing in progress';
				SET envRef.individual.statusDesc_ghipss = inRef.errorDescription;
			ELSE
				SET envRef.individual.status_ghipss = statusRef;
				SET envRef.individual.errorDescription = 'Transaction failed';
			END IF;

		END IF;
	END;
END MODULE;

	CREATE PROCEDURE rtpCall (IN envReqVal REFERENCE)
	BEGIN
				INSERT INTO Database.BILLERS (billerId,
											  institutionId,
											  name,
											  accountNumber,
											  branchcode,
											  callbackurl,
											  requestsource,
											  ghipss_status,
											  ghipss_statusdescription,
											  cbs_status,
											  cbs_statusdescription,
											  statuscode,
											  statusdescription,
											  requesttimestamp)
							VALUES (envReqVal.billerId,
									enrollInstitutionId,
									envReqVal.name,
									envReqVal.accountNumber,
									envReqVal.branchCode, 
									callBackURL,
									envReqVal.requestSource,
									envReqVal.status_ghipss,
									envReqVal.statusDesc_ghipss,
									envReqVal.status_cbs,
									envReqVal.statusDesc_cbs,
									envReqVal.errorCode,
									envReqVal.errorDescription,
									current_timestamp);				
		
	END;