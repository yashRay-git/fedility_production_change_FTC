
PATH Fidelity_Bank_GhIPSS_Common, com.fidilitybank.co.zw.common.esql;
DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE wsse NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-utility-1.0.xsd';
DECLARE fcub NAMESPACE 'http://fcubs.ofss.com/service/FCUBSRTService';
DECLARE ret NAMESPACE 'http://fcubs.ofss.com/service/FCUBSRTService';
DECLARE ns NAMESPACE 'http://fcubs.ofss.com/service/FCUBSRTService';
DECLARE S NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
--DECLARE xmlns NAMESPACE 'http://fcubs.ofss.com/service/FCUBSRTService';

DECLARE CustInfoServiceReq EXTERNAL CHARACTER '';
DECLARE CreateTransactionReq EXTERNAL CHARACTER '';
DECLARE QueryTransactionReq EXTERNAL CHARACTER '';
DECLARE GhIPSSReq EXTERNAL CHARACTER '' ;
DECLARE ReverseRTServiceReq, Login, PW, HeaderUname, HeaderPw, Nonce, PRD, TXNCCY, UBSCOMP, SOURCE EXTERNAL CHARACTER '';
DECLARE TSQueryReq, Fcode, OrigineBank, ChannelCode, MODULEID, CreateOperation, QueryOperation, ReverseOperation, CustInfOperation ,SERVICE EXTERNAL CHARACTER '';



CREATE COMPUTE MODULE fundsTransferCredit_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN


		CREATE FIELD Environment.Values;
		DECLARE envValRef REFERENCE TO Environment.Values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		SET envValRef.msgId = InputRoot.JSON.Data.channelRef;

		CREATE LASTCHILD OF Environment.Request NAME 'values';
		CREATE LASTCHILD OF Environment.Inref DOMAIN('JSON');
		CREATE LASTCHILD OF Environment.Inref.JSON NAME('Data');
		DECLARE envRef REFERENCE TO Environment.Inref.JSON.Data;
		SET envRef.operation = InputRoot.JSON.Data.operation ;
		SET envRef.amount = InputRoot.JSON.Data.amount ;
		SET envRef.destBankCode = InputRoot.JSON.Data.destBankCode ;
		SET envRef.channelRef = InputRoot.JSON.Data.channelRef ;
		SET envRef.userId = InputRoot.JSON.Data.userId ;
		SET envRef.accountToDebit = InputRoot.JSON.Data.accountToDebit ;
		SET envRef.nameToDebit = InputRoot.JSON.Data.nameToDebit ;
		SET envRef.accountToCredit = InputRoot.JSON.Data.accountToCredit ;
		SET envRef.nameToCredit = InputRoot.JSON.Data.nameToCredit ;
		SET envRef.transactionDetail = InputRoot.JSON.Data.transactionDetail ;
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--Logging code End
		
		-- Start framing CustInfoServiceReq
		SET OutputRoot.JSON.Data.operation = CustInfOperation;
		SET OutputRoot.JSON.Data.accountNo = envRef.accountToDebit;
		-- End framing CustInfoServiceReq
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('CustInfoServiceReq',envValRef,OutputRoot);
		--Logging code End


		SET Environment.Request.values.requestFlag = 'CustInfoServiceReq';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = CustInfoServiceReq;
		--DB LOGGING
		INSERT INTO Database.CBS_TRANSACTION (
		MSGID, CORRELID, USERID, BRANCH, MSGSTAT,
		XREF, FCCREF, TXNACC, TXNAMT, TXNDATE,
		NARRATIVE, MAKERID, MAKERSTAMP, CHECKERSTAMP, ACCTITLE1,
		CHQNO, BENFNAME, BENFADDR1,
		CT_STATUS, CT_STATUSDESCRIPTION,
		QT_STATUS, QT_STATUSDESCRIPTION,
		REVERSE_STATUS, REVERSE_STATUSDESCRIPTION
		) VALUES (
		envRef.channelRef, -- MSGID
		envRef.channelRef, -- CORRELID
		envRef.userId, -- USERID
		NULL, -- BRANCH
		NULL, -- MSGSTAT
		envRef.channelRef, -- XREF
		NULL, -- FCCREF
		NULL, -- TXNACC
		envRef.amount, -- TXNAMT
		CURRENT_DATE, -- TXNDATE
		envRef.transactionDetail, -- NARRATIVE
		NULL, -- MAKERID
		NULL, -- MAKERSTAMP
		NULL, -- CHECKERSTAMP
		NULL, -- ACCTITLE1
		envRef.destBankCode, -- CHQNO
		envRef.nameToCredit, -- BENFNAME
		envRef.accountToCredit, -- BENFADDR1
		NULL, -- CT_STATUS
		NULL, -- CT_STATUSDESCRIPTION
		NULL, -- QT_STATUS
		NULL, -- QT_STATUSDESCRIPTION
		NULL, -- REVERSE_STATUS
		NULL -- REVERSE_STATUSDESCRIPTION
		);
		--
		-- DB LOGGING

		PROPAGATE TO TERMINAL 'out1';

		DECLARE envCbsRes REFERENCE TO Environment.CbsRes.JSON.Data;


		UPDATE Database.CBS_TRANSACTION AS p
		SET

		BRANCH = envCbsRes.branchCode,
		TXNACC =envCbsRes.custAccNo,
		ACCTITLE1 = envCbsRes.customerName1
		WHERE p.MSGID = envRef.channelRef;




		IF envCbsRes.custAccNo = '' THEN
			SET OutputRoot.JSON.Data.channelRef = envRef.channelRef;
			SET OutputRoot.JSON.Data.transactionStatus = 'Invalid account Account';
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
			--Logging code End



			PROPAGATE TO TERMINAL 'out2';
			RETURN;
		ELSE
			-- Start framing CreateTransactionReq

			DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
			DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
			-- Create Envelope
			CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
			DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:ret = ret;
			-- Create Header with Security
			CREATE FIELD soapEnvRef.soapenv:Header;
			DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;
			CREATE LASTCHILD OF soapEnvHeader.wsse:Security;
			SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
			SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';
			CREATE LASTCHILD OF soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';

			DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET UsernameTokenRef.wsse:Username = HeaderUname; --'esbtestuser';
			SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute)Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
			SET UsernameTokenRef.wsse:Password = HeaderPw; --'fidelity,123';
			SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
			SET UsernameTokenRef.wsse:Nonce = Nonce; -- 'PCamrOP55EQorWOZ8zOBHA==';
			SET UsernameTokenRef.wsu:Created = CAST(CURRENT_GMTTIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''); --'2015-10-28T02:45:11.593Z';

			CREATE LASTCHILD OF soapEnvRef NAME 'soapenv:Body';
			DECLARE bodyRef REFERENCE TO soapEnvRef."soapenv:Body";
			--
			CREATE LASTCHILD OF bodyRef NAME 'ret:CREATETRANSACTION_FSFS_REQ';
			DECLARE reqRef REFERENCE TO bodyRef."ret:CREATETRANSACTION_FSFS_REQ";
			-- FCUBS_HEADER
			CREATE LASTCHILD OF reqRef NAME 'ret:FCUBS_HEADER';
			DECLARE headerDataRef REFERENCE TO reqRef."ret:FCUBS_HEADER";
			SET headerDataRef."ret:SOURCE" = SOURCE; --'GIP';
			SET headerDataRef."ret:UBSCOMP" = UBSCOMP; -- 'FCUBS';
			SET headerDataRef."ret:MSGID" = envRef.channelRef; --'MSG' || CAST(RAND() * 1000000000 AS CHARACTER); -- Auto-generated
			SET headerDataRef."ret:CORRELID" = envRef.channelRef; -- 'COR' || CAST(RAND() * 1000000000 AS CHARACTER); -- Auto-generated
			SET headerDataRef."ret:USERID" = inputRef.userId;
			SET headerDataRef."ret:BRANCH" = envCbsRes.branchCode; -- Should come from CustInfoService
			SET headerDataRef."ret:MODULEID" = MODULEID; --'RT';
			SET headerDataRef."ret:SERVICE" = SERVICE; --'FCUBSRTService';
			SET headerDataRef."ret:OPERATION" = 'CreateTransaction';
			SET headerDataRef."ret:SOURCE_OPERATION" = 'CreateTransaction';
			SET headerDataRef."ret:SOURCE_USERID" = inputRef.userId;
			Create LASTCHILD OF headerDataRef."ret:ADDL" NAME 'ret:PARAM';
			DECLARE parm REFERENCE TO headerDataRef."ret:ADDL"."ret:PARAM";
			SET parm."ret:NAME"= 'SERVERSTAT';
			SET parm."ret:VALUE"= 'HOST';
			-- FCUBS_BODY
			CREATE LASTCHILD OF reqRef NAME 'ret:FCUBS_BODY';
			DECLARE bodyDataRef REFERENCE TO reqRef."ret:FCUBS_BODY";
			-- Transaction
			CREATE LASTCHILD OF bodyDataRef NAME 'ret:Transaction-Details';
			DECLARE txnRef REFERENCE TO bodyDataRef."ret:Transaction-Details";
			SET txnRef."ret:XREF" = inputRef.channelRef;
			SET txnRef."ret:PRD" = PRD; --'MS38';
			SET txnRef."ret:BRN" = envCbsRes.branchCode; -- From CustInfoService
			SET txnRef."ret:TXNBRN" = envCbsRes.branchCode; -- From CustInfoService
			SET txnRef."ret:TXNACC" = inputRef.accountToDebit;
			SET txnRef."ret:TXNCCY" = TXNCCY; --'GHS';
			SET txnRef."ret:TXNAMT" = inputRef.amount;
			SET txnRef."ret:REMACCOUNT" = inputRef.accountToCredit;
			SET txnRef."ret:REMBANK" = inputRef.nameToCredit;
			SET txnRef."ret:ROUTINGNO" = inputRef.destBankCode ;
			SET txnRef."ret:ENDPOINT" = '57699234';
			SET txnRef."ret:SERIALNO" = '35646896';
			SET txnRef."ret:NARRATIVE" = inputRef.transactionDetail;
			-- End CreateTransactionReq

			SET Environment.Request.values.requestFlag = 'CreateTransactionReq';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = CreateTransactionReq;
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('CreateTransactionReq',envValRef,OutputRoot);
			--Logging code End

			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(envValRef.logData CCSID envValRef.ccsidRef ENCODING envValRef.encodeRef);

			PROPAGATE TO TERMINAL 'out1';

			DECLARE envCbsCTRes REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details";
			DECLARE envCbsCTRes_WARNING REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:FCUBS_WARNING_RESP.*:WARNING;
			DECLARE txnDetailsRef REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_HEADER;
			--DBLogging UPDATE code Start
			DECLARE statusCode,statusDesc CHARACTER;

			IF FIELDNAME(envCbsCTRes_WARNING.*:WCODE)IS NOT NULL THEN
				SET statusCode = envCbsCTRes_WARNING.*:WCODE;
				SET statusDesc = envCbsCTRes_WARNING.*:WDESC;
			ELSEIF FIELDNAME(envCbsCTRes_WARNING.*:ECODE)IS NOT NULL THEN
				SET statusCode = envCbsCTRes_WARNING.*:ECODE;
				SET statusDesc = envCbsCTRes_WARNING.*:EDESC;
			END IF;

			UPDATE Database.CBS_TRANSACTION AS p
			SET
			MSGSTAT = txnDetailsRef.*:MSGSTAT,
			FCCREF= envCbsCTRes.*:FCCREF, -- FCCREF
			MAKERID= envCbsCTRes.*:MAKERID, -- MAKERID
			MAKERSTAMP= envCbsCTRes.*:MAKERSTAMP, -- MAKERSTAMP
			CHECKERSTAMP= envCbsCTRes.*:CHECKERSTAMP, -- CHECKERSTAMP
			CT_STATUS = statusCode,
			CT_STATUSDESCRIPTION = statusDesc
			WHERE p.MSGID = Environment.Inref.JSON.Data.channelRef;


		END IF;
		--DBLogging UPDATE code END
		DECLARE txnDetailsRef REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_HEADER;
		IF txnDetailsRef.*:MSGSTAT = '' THEN
			-- Start framing QuearyTransactionReq

			DECLARE inputRef REFERENCE TO InputRoot.JSON.Data;
			DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
			-- Create Envelope
			CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
			DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:fcub = ret;
			-- Create Header with Security
			CREATE FIELD soapEnvRef.soapenv:Header;
			DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;
			CREATE LASTCHILD OF soapEnvHeader.wsse:Security;
			SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
			SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';
			CREATE LASTCHILD OF soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1'; 


			DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET UsernameTokenRef.wsse:Username = HeaderUname; --'esbtestuser';
			SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute)Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
			SET UsernameTokenRef.wsse:Password = HeaderPw; --'fidelity,123';
			SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
			SET UsernameTokenRef.wsse:Nonce = Nonce; -- 'PCamrOP55EQorWOZ8zOBHA==';
			SET UsernameTokenRef.wsu:Created = CAST(CURRENT_GMTTIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''); --'2015-10-28T02:45:11.593Z';

			CREATE LASTCHILD OF soapEnvRef NAME 'soapenv:Body';
			DECLARE bodyRef REFERENCE TO soapEnvRef."soapenv:Body";

			CREATE LASTCHILD OF bodyRef NAME 'fcub:QUERYTRANSACTION_IOFS_REQ';
			DECLARE reqRef REFERENCE TO bodyRef."fcub:QUERYTRANSACTION_IOFS_REQ";
			-- FCUBS_HEADER
			CREATE LASTCHILD OF reqRef NAME 'fcub:FCUBS_HEADER';
			DECLARE headerDataRef REFERENCE TO reqRef."fcub:FCUBS_HEADER";
			SET headerDataRef."fcub:SOURCE" = SOURCE; --'GIP';
			SET headerDataRef."fcub:UBSCOMP" = UBSCOMP; -- 'FCUBS';
			SET headerDataRef."fcub:MSGID" = envRef.channelRef; --'MSG' || CAST(RAND() * 1000000000 AS CHARACTER); -- Auto-generated
			SET headerDataRef."fcub:CORRELID" = envRef.channelRef; -- 'COR' || CAST(RAND() * 1000000000 AS CHARACTER); -- Auto-generated
			SET headerDataRef."fcub:USERID" = inputRef.userId;
			SET headerDataRef."fcub:BRANCH" = envCbsRes.branchCode; -- Should come from CustInfoService
			SET headerDataRef."fcub:MODULEID" = MODULEID; --'RT';
			SET headerDataRef."fcub:SERVICE" = SERVICE; --'FCUBSRTService';
			SET headerDataRef."fcub:OPERATION" = 'QueryTransaction';
			SET headerDataRef."fcub:SOURCE_OPERATION" = 'QueryTransaction';
			SET headerDataRef."fcub:SOURCE_USERID" = inputRef.userId;
			Create LASTCHILD OF headerDataRef."fcub:ADDL" NAME 'fcub:PARAM';
			DECLARE parms REFERENCE TO headerDataRef."fcub:ADDL"."fcub:PARAM";
			SET parms."fcub:NAME"= 'SERVERSTAT';
			SET parms."fcub:VALUE"= 'HOST';
			-- FCUBS_BODY
			CREATE LASTCHILD OF reqRef NAME 'fcub:FCUBS_BODY';
			DECLARE bodyDataRef REFERENCE TO reqRef."fcub:FCUBS_BODY";
			-- Transaction
			CREATE LASTCHILD OF bodyDataRef NAME 'fcub:Transaction-Details-IO';
			DECLARE txnRef REFERENCE TO bodyDataRef."fcub:Transaction-Details-IO";
			SET txnRef."fcub:XREF" = inputRef.channelRef;
			-- End QuearyTransactionReq

			SET Environment.Request.values.requestFlag = 'QueryTransactionReq';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = QueryTransactionReq;
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('QueryTransactionReq',envValRef,OutputRoot);
			--Logging code End

			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(envValRef.logData CCSID envValRef.ccsidRef ENCODING envValRef.encodeRef);
			PROPAGATE TO TERMINAL 'out1';			


		ELSEIF txnDetailsRef.*:MSGSTAT = 'SUCCESS' THEN

			CALL GhIPSSReqCall();
		END IF;



		DECLARE envCbsQTRes REFERENCE TO Environment.CbsQTRes.XMLNSC.*:Envelope.*:Body.*:QUERYTRANSACTION_IOFS_RES;
		DECLARE envCbsQThead REFERENCE TO Environment.CbsQTRes.XMLNSC.*:Envelope.*:Body.*:QUERYTRANSACTION_IOFS_RES.*:FCUBS_HEADER;
		DECLARE envCbsQbody REFERENCE TO Environment.CbsQTRes.XMLNSC.*:Envelope.*:Body.*:QUERYTRANSACTION_IOFS_RES.*:FCUBS_BODY.*:"Transaction-Details";
		DECLARE envCbsQbody_Warning REFERENCE TO Environment.CbsQTRes.XMLNSC.*:Envelope.*:Body.*:QUERYTRANSACTION_IOFS_RES.*:FCUBS_BODY.*:FCUBS_WARNING_RESP.*:WARNING;
		--DBLogging code Start
		DECLARE statusCode,statusDesc CHARACTER;
		IF FIELDNAME(envCbsQbody_Warning.*:WCODE)IS NOT NULL THEN
			SET statusCode = envCbsQbody_Warning.*:WCODE;
			SET statusDesc = envCbsQbody_Warning.*:WDESC;
		ELSEIF FIELDNAME(envCbsQbody_Warning.*:ECODE)IS NOT NULL THEN
			SET statusCode = envCbsQbody_Warning.*:ECODE;
			SET statusDesc = envCbsQbody_Warning.*:EDESC;
		END IF;

		UPDATE Database.CBS_TRANSACTION AS p
		SET
		MSGSTAT = txnDetailsRef.*:MSGSTAT,
		FCCREF= envCbsQbody.*:FCCREF, -- FCCREF
		MAKERID= envCbsQbody.*:MAKERID, -- MAKERID
		MAKERSTAMP= envCbsQbody.*:MAKERSTAMP, -- MAKERSTAMP
		CHECKERSTAMP= envCbsQbody.*:CHECKERSTAMP, -- CHECKERSTAMP
		QT_STATUS = statusCode,
		QT_STATUSDESCRIPTION = statusDesc
		WHERE p.MSGID = Environment.Inref.JSON.Data.channelRef;

		IF envCbsQTRes.*:FCUBS_BODY.*:FCUBS_WARNING_RESP.*:WARNING.*:ECODE = 'WB-TXN-001' THEN
			-- Start framming Channel Responce
			SET OutputRoot.JSON.Data.channelRef = envRef.channelRef;
			SET OutputRoot.JSON.Data.transactionStatus = 'Transaction has timeout, please try again';
			-- End framming Channel Responce
			PROPAGATE TO TERMINAL 'out2';
			RETURN;
		ELSEIF envCbsQTRes.*:FCUBS_HEADER.*:MSGSTAT = 'SUCCESS' THEN

			CALL GhIPSSReqCall();
		END IF;

	END;

	CREATE PROCEDURE GhIPSSReqCall() BEGIN


		CREATE FIELD Environment.Values;
		DECLARE envValRef REFERENCE TO Environment.Values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		SET envValRef.msgId = InputRoot.JSON.Data.channelRef;
		-- Start framing GhIPSSReq

		DECLARE currentTime CHARACTER;
		DECLARE amountFormatted CHARACTER;
		DECLARE debitName CHARACTER ;
		DECLARE amountref REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details";
		-- Format Amount (12-digit with leading zeros)
		SET amountFormatted = RIGHT('000000000000' || CAST(CAST(CAST(amountref.*:TXNAMT AS DECIMAL) * 100 AS INTEGER) AS CHARACTER), 12); --RIGHT('000000000000' || CAST(amountref.*:TXNAMT AS CHARACTER), 12);
		-- Get current timestamp in YYMMDDHHMMSS
		SET currentTime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyMMddHHmmss');
		-- Generate 6-digit tracking number
		DECLARE trackingNum INTEGER;
		DECLARE trackingNumStr CHARACTER;
		-- Generate a random number between 0 and 999999
		SET trackingNum = CAST(RAND() * 999999 AS INTEGER);
		-- Format the number to 6 digits with leading zeros
		SET trackingNumStr = RIGHT('000000' || CAST(trackingNum AS CHARACTER), 6);
		-- Clean and trim NameToDebit (ACCTITLE1)
		-- SET debitName = TRIM(TRAILING FROM TRIM(LEADING FROM
		-- REPLACE(REPLACE(REPLACE(REPLACE(
		-- COALESCE(InputRoot.XMLNSC.CREATETRANSACTION_FSFS_RES.FCUBS_BODY."Transaction-Details".ACCTITLE1, ''),
		-- '&', ' '), '<', ' '), '>', ' '), ',', ' ')
		-- ));
		--

		SET debitName = LEFT(debitName, 50); -- Limit to 50 chars
		
		
		-- Build SOAP structure
		CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;

		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
		SET OutputRoot.XMLNSC.soapenv:Envelope.(XMLNSC.NamespaceDecl)xmlns:com = 'com.ghipss.gip';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.(XMLNSC.Attribute) soapenv:mustUnderstand = '1';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsse:Username = HeaderUname;
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsse:Password.(XMLNSC.Attribute)Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsse:Password = HeaderPw;
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsse:Nonce = Nonce;
		SET OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Header.wsse:Security.wsse:UsernameToken.wsu:Created = CAST(CURRENT_GMTTIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z''');
		
		-- Map Fields

		CREATE FIELD OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body."com:GIPTransactionOp".ReqGIPTransaction;
		DECLARE ghipsreq REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope.soapenv:Body."com:GIPTransactionOp".ReqGIPTransaction;

		SET ghipsreq.Amount = amountFormatted;
		SET ghipsreq.datetime = currentTime;
		SET ghipsreq.TrackingNum = trackingNumStr;
		SET ghipsreq.FunctionCode = Fcode; --'240';
		SET ghipsreq.OrigineBank = OrigineBank;
		SET ghipsreq.DestBank = Environment.Inref.JSON.Data.destBankCode;
		SET ghipsreq.SessionID = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:XREF;
		SET ghipsreq.ChannelCode = ChannelCode;
		SET ghipsreq.AccountToDebit = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:TXNACC;
		SET ghipsreq.NameToDebit = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:ACCTITLE1;
		SET ghipsreq.AccountToCredit = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:"Cheque-Details".*:BENFADDR1;
		SET ghipsreq.NameToCredit = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:"Cheque-Details".*:BENFNAME;
		SET ghipsreq.Narration = Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details".*:NARRATIVE;
		SET ghipsreq.Login = Login; --'300323';
		SET ghipsreq.Password = PW; --'3104b15a6e5e57ee5663f64e6a1fb0d940d7824c875e42d35f9a30a72';
		-- End framing GhIPSSReq
		
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('GhIPSSReq',envValRef,OutputRoot);
		--Logging code End

		SET Environment.Request.values.requestFlag = 'GhIPSSReq';
		SET OutputLocalEnvironment.Destination.HTTP.RequestURL = GhIPSSReq;

		CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(envValRef.logData CCSID envValRef.ccsidRef ENCODING envValRef.encodeRef);
		PROPAGATE TO TERMINAL 'out1';

		DECLARE envGhipssRes REFERENCE TO Environment.GhipssRes.XMLNSC.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse;

		INSERT INTO Database.FTC_OUTWARD (
		AMOUNT, DATETIME, TRACKINGNUM,FUNCTIONCODE,ORIGINEBANK,DESTBANK,SESSIONID,CHANNELCODE,ACCOUNTTODEBIT,
		NAMETODEBIT,ACCOUNTTOCREDIT,NAMETOCREDIT,NARRATION,LOGIN,PASSWORD,ACTCODE,APRVCODE,TRANSACTIONSTATUS
		) VALUES (
		envGhipssRes.*:Amount, envGhipssRes.*:datetime, envGhipssRes.*:TrackingNum, envGhipssRes.*:FunctionCode, envGhipssRes.*:OrigineBank,envGhipssRes.*:DestBank,
		envGhipssRes.*:SessionID, ChannelCode, envGhipssRes.*:AccountToDebit,envGhipssRes.*:NameToDebit, envGhipssRes.*:AccountToCredit,envGhipssRes.*:NameToCredit,
		envGhipssRes.*:Narration, Login,PW, envGhipssRes.*:ActCode,envGhipssRes.*:AprvCode,
		'SUCCESS'
		);


		IF envGhipssRes.ActCode = '000' THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
			CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
			DECLARE outRef REFERENCE TO OutputRoot.JSON.Data;
			DECLARE InGIP REFERENCE TO Environment.GhipssRes.XMLNSC.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse;

			SET outRef.channelRef = InGIP.SessionID ;
			SET outRef.amount = InGIP.Amount ;
			SET outRef.accountToCredit = InGIP.NameToCredit ;
			SET outRef.nameToCredit = InGIP.AccountToCredit ;
			SET outRef.transactionDetails = InGIP.Narration ;
			SET outRef.actCode = InGIP.ActCode ;
			SET outRef.aprvCode = InGIP.ActCode ;
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
			--Logging code End

			PROPAGATE TO TERMINAL 'out2';
			RETURN;
		ELSEIF envGhipssRes.ActCode = '100' OR envGhipssRes.ActCode = '381' THEN
			--Start framing ReverseRTServiceReq

			DECLARE soapenv CHARACTER 'http://schemas.xmlsoap.org/soap/envelope/';
			DECLARE fcub CHARACTER 'http://fcubs.ofss.com/service/FCUBSRTService';
			DECLARE wsse CHARACTER 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
			DECLARE wsu CHARACTER 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';


			DECLARE envRTfccRef REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_BODY.*:"Transaction-Details";
			DECLARE envRTuserRef REFERENCE TO Environment.CbsCTRes.XMLNSC.*:Envelope.*:Body.*:CREATETRANSACTION_FSFS_RES.*:FCUBS_HEADER;



			DECLARE vUserId CHARACTER envRTuserRef.*:USERID;
			-- Create Envelope

			CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
			DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:fcub = fcub;
			-- Create Header with Security
			CREATE FIELD soapEnvRef.soapenv:Header;
			DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;
			CREATE FIELD soapEnvHeader.wsse:Security;
			SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
			SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';

			CREATE FIELD soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';

			DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET UsernameTokenRef.wsse:Username = HeaderUname; --'esbtestuser';
			SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute)Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
			SET UsernameTokenRef.wsse:Password = HeaderPw; --'fidelity,123';
			SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
			SET UsernameTokenRef.wsse:Nonce = Nonce; --'PCamrOP55EQorWOZ8zOBHA==';
			SET UsernameTokenRef.wsu:Created = CAST(CURRENT_GMTTIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z''');
			-- Create Body
			CREATE FIELD soapEnvRef.soapenv:Body;
			DECLARE soapBody REFERENCE TO soapEnvRef.soapenv:Body;
			CREATE FIELD soapBody.fcub:REVERSETRANSACTION_IOPK_REQ;
			-- FCUBS_HEADER
			DECLARE reqRef REFERENCE TO soapBody.fcub:REVERSETRANSACTION_IOPK_REQ;
			CREATE FIELD reqRef.fcub:FCUBS_HEADER;

			SET reqRef.fcub:FCUBS_HEADER.fcub:SOURCE = SOURCE; --'GIP';
			SET reqRef.fcub:FCUBS_HEADER.fcub:UBSCOMP = UBSCOMP; --'FCUBS';
			SET reqRef.fcub:FCUBS_HEADER.fcub:MSGID = Environment.Inref.JSON.Data.channelRef; -- 18 char max
			SET reqRef.fcub:FCUBS_HEADER.fcub:CORRELID = Environment.Inref.JSON.Data.channelRef; -- 18 char max
			SET reqRef.fcub:FCUBS_HEADER.fcub:USERID = Environment.Inref.JSON.Data.userId;
			SET reqRef.fcub:FCUBS_HEADER.fcub:BRANCH = LEFT(envRTfccRef.*:FCCREF, 3); -- First 3 of FCCREF
			SET reqRef.fcub:FCUBS_HEADER.fcub:MODULEID = MODULEID; --'RT';
			SET reqRef.fcub:FCUBS_HEADER.fcub:SERVICE = SERVICE; --'FCUBSRTService';
			SET reqRef.fcub:FCUBS_HEADER.fcub:OPERATION = 'ReverseTransaction'; -- 'ReverseTransaction';
			SET reqRef.fcub:FCUBS_HEADER.fcub:SOURCE_OPERATION = 'ReverseTransaction'; --'ReverseTransaction';
			SET reqRef.fcub:FCUBS_HEADER.fcub:SOURCE_USERID = Environment.Inref.JSON.Data.userId;
			-- FCUBS_HEADER.ADDL.PARAM
			CREATE FIELD reqRef.fcub:FCUBS_HEADER.fcub:ADDL;
			CREATE FIELD reqRef.fcub:FCUBS_HEADER.fcub:ADDL.fcub:PARAM;
			SET reqRef.fcub:FCUBS_HEADER.fcub:ADDL.fcub:PARAM.fcub:NAME = 'SERVERSTAT';
			SET reqRef.fcub:FCUBS_HEADER.fcub:ADDL.fcub:PARAM.fcub:VALUE = 'HOST';
			-- FCUBS_BODY.Transaction-Details-IO
			CREATE FIELD reqRef.fcub:FCUBS_BODY;
			CREATE FIELD reqRef.fcub:FCUBS_BODY.fcub:"Transaction-Details-IO";
			SET reqRef.fcub:FCUBS_BODY.fcub:"Transaction-Details-IO".fcub:FCCREF = envRTfccRef.*:FCCREF;
			--End framing ReverseRTServiceReq

			SET Environment.Request.values.requestFlag = 'ReverseRTServiceReq';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = ReverseRTServiceReq;
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('ReverseRTServiceReq',envValRef,OutputRoot);
			--Logging code End
			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(envValRef.logData CCSID envValRef.ccsidRef ENCODING envValRef.encodeRef);

			PROPAGATE TO TERMINAL 'out1';

			DECLARE envReverseRTServiceReq REFERENCE TO Environment.ReverseRTServiceReq.XMLNSC.*:Envelope.*:Body.*:REVERSETRANSACTION_IOPK_RES;
			DECLARE envRevRTReqHead REFERENCE TO envReverseRTServiceReq.*:FCUBS_HEADER;
			DECLARE envRevRTReqbody REFERENCE TO envReverseRTServiceReq.*:FCUBS_BODY;
			--DBLogging code Start
			DECLARE statusCode,statusDesc CHARACTER;
			IF FIELDNAME(envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:WCODE)IS NOT NULL THEN
				SET statusCode = envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:WCODE;
				SET statusDesc = envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:WDESC;
			ELSEIF FIELDNAME(envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:ECODE)IS NOT NULL THEN
				SET statusCode = envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:ECODE;
				SET statusDesc = envRevRTReqbody.*:FCUBS_WARNING_RESP.*:WARNING.*:EDESC;
			END IF;
			UPDATE Database.CBS_TRANSACTION AS p
			SET
			MSGSTAT = envRevRTReqHead.*:MSGSTAT,
			REVERSE_STATUS = statusCode,
			REVERSE_STATUSDESCRIPTION = statusDesc
			WHERE p.MSGID = Environment.Inref.JSON.Data.channelRef;
			--DBLogging code end

			IF envRevRTReqHead.*:MSGSTAT = 'SUCCESS' THEN
				SET OutputRoot.JSON.Data.transactionStatus = 'Transaction has failed, please try again';
				PROPAGATE TO TERMINAL 'out2';
				RETURN;

			ELSEIF envRevRTReqHead.*:MSGSTAT = 'FAILURE' THEN
				SET OutputRoot.JSON.Data.transactionStatus = 'Contact the customer care team';
				PROPAGATE TO TERMINAL 'out2';
				RETURN;

			END IF;

		ELSEIF envGhipssRes.ActCode = '909' OR envGhipssRes.ActCode = '912' OR envGhipssRes.ActCode = NULL OR envGhipssRes.ActCode = '990' OR envGhipssRes.ActCode = '911' OR envGhipssRes.ActCode = 'timeouts' THEN
			--Start framing TSQueryReq

			DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
			DECLARE wsse NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
			DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';
			-- DECLARE fcub NAMESPACE 'http://www.oracle.com/flexcube/common';
			DECLARE com NAMESPACE 'com.ghipss.gip';

			CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
			DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
			SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:com = com;
			-- Create Header with Security
			CREATE FIELD soapEnvRef.soapenv:Header;
			DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;
			CREATE FIELD soapEnvHeader.wsse:Security;
			SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
			SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';

			CREATE FIELD soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
			SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';

			DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;
			SET UsernameTokenRef.wsse:Username = HeaderUname; -- 'esbtestuser';
			SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute)Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
			SET UsernameTokenRef.wsse:Password = HeaderPw; -- 'fidelity,123';
			SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
			SET UsernameTokenRef.wsse:Nonce = Nonce; -- 'PCamrOP55EQorWOZ8zOBHA==';
			SET UsernameTokenRef.wsu:Created = CAST(CURRENT_GMTTIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss.SSS''Z'''); --'2015-10-28T02:45:11.593Z';
			-- Create Body
			CREATE FIELD soapEnvRef.soapenv:Body;
			DECLARE soapEnvBody REFERENCE TO soapEnvRef.soapenv:Body;
			-- Create GIPTransactionOp inside Body
			CREATE FIELD soapEnvBody."com:GIPTransactionOp";
			DECLARE transOpRef REFERENCE TO soapEnvBody."com:GIPTransactionOp";
			-- SET transOpRef.(XMLNSC.NamespaceDecl)xmlns:com = 'com.ghipss.gip';
			-- Create ReqGIPTransaction
			CREATE FIELD transOpRef.ReqGIPTransaction;
			DECLARE reqRef REFERENCE TO transOpRef.ReqGIPTransaction;
			-- Set required fields
			SET reqRef.Amount = envGhipssRes.Amount;
			SET reqRef.datetime = envGhipssRes.datetime;
			SET reqRef.TrackingNum = envGhipssRes.TrackingNum;
			SET reqRef.FunctionCode = Fcode;
			SET reqRef.OrigineBank = envGhipssRes.OrigineBank;
			SET reqRef.DestBank = envGhipssRes.DestBank;
			SET reqRef.SessionID = envGhipssRes.SessionID;
			SET reqRef.ChannelCode = ChannelCode;
			SET reqRef.NameToDebit = envGhipssRes.NameToDebit;
			SET reqRef.AccountToDebit = envGhipssRes.AccountToDebit;
			-- SET reqRef.NameToCredit = envGhipssRes.NameToCredit;
			SET reqRef.AccountToCredit = envGhipssRes.AccountToCredit;
			SET reqRef.Narration = envGhipssRes.Narration;
			SET reqRef.Login = Login; -- '300323';
			SET reqRef.Password =PW; -- 'c941a4ec7bd7937a58c1e6aae3dd50160dcc14d6f10c754041d7b74f9a84d2';
			--End framing TSQueryReq

			SET Environment.Request.values.requestFlag = 'TSQueryReq';
			SET OutputLocalEnvironment.Destination.HTTP.RequestURL = TSQueryReq;
			--Logging code Start
			SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
			CALL prepareGhIPSSLogger('TSQueryReq',envValRef,OutputRoot);
			--Logging code End

			CREATE LASTCHILD OF OutputRoot DOMAIN ('XMLNSC') PARSE(envValRef.logData CCSID envValRef.ccsidRef ENCODING envValRef.encodeRef);


			PROPAGATE TO TERMINAL 'out1';


			DECLARE envTSQueryReq REFERENCE TO Environment.TSQueryReq.XMLNSC.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse;
			-- DBLogging code start
				INSERT INTO Database.TSQ_OUTWARD (
				AMOUNT, DATETIME, TRACKINGNUM, FUNCTIONCODE, ORIGINEBANK, DESTBANK, SESSIONID, CHANNELCODE, ACCOUNTTODEBIT,
				NAMETODEBIT, ACCOUNTTOCREDIT, NAMETOCREDIT, NARRATION, LOGIN, PASSWORD, TRANSACTIONSTATUS,
				ACTCODE, APRVCODE, STATUSQUERY
				) VALUES (
				envTSQueryReq.*:Amount,
				envTSQueryReq.*:datetime,
				envTSQueryReq.*:TrackingNum,
				Fcode,
				envTSQueryReq.*:OrigineBank ,
				envTSQueryReq.*:DestBank ,
				envTSQueryReq.*:SessionID ,
				envTSQueryReq.*:ChannelCode ,
				envTSQueryReq.*:AccountToDebit ,
				envTSQueryReq.*:NameToDebit ,
				envTSQueryReq.*:AccountToCredit ,
				envTSQueryReq.*:NameToCredit ,
				envTSQueryReq.*:Narration ,
				Login,
				PW,
				'SUCCESS',
				envTSQueryReq.*:ActCode,
				envTSQueryReq.*:AprvCode,
				envTSQueryReq.*:StatusQuery
				);
			IF envTSQueryReq.*:ActCode = '000' AND envTSQueryReq.*:StatusQuery = '000' THEN
				-- Build Output JSON response

				CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
				CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
				SET OutputRoot.JSON.Data.channelRef = Environment.Inref.JSON.Data.channelRef;
				SET OutputRoot.JSON.Data.amount = Environment.Inref.JSON.Data.amount;
				SET OutputRoot.JSON.Data.accountToCredit = envTSQueryReq.AccountToCredit;
				SET OutputRoot.JSON.Data.nameToCredit = envTSQueryReq.NameToCredit;
				SET OutputRoot.JSON.Data.transactionDetail = 'GIP PAYMENT FOR GOODS';
				SET OutputRoot.JSON.Data.statusCode = envTSQueryReq.*:StatusQuery;
				SET OutputRoot.JSON.Data.aprvCode = envTSQueryReq.*:AprvCode;
				PROPAGATE TO TERMINAL 'out2';
				RETURN;

			ELSEIF envTSQueryReq.*:ActCode <> '000' OR envTSQueryReq.*:StatusQuery <> '000' THEN
				SET OutputRoot.JSON.Data.transactionStatus='Contact the customer care team';
				PROPAGATE TO TERMINAL 'out2';
				RETURN;
			END IF;


		END IF;

	END;
END MODULE;

CREATE COMPUTE MODULE fundstransfercredit_Res
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;

	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE envRef REFERENCE TO Environment.Request.values;

		IF envRef.requestFlag = 'CustInfoServiceReq' THEN
			CREATE LASTCHILD OF Environment.CbsRes DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB CCSID InputRoot.Properties.CodedCharSetId);
		ELSEIF envRef.requestFlag = 'CreateTransactionReq' THEN
			CREATE LASTCHILD OF Environment.CbsCTRes DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB);
		ELSEIF envRef.requestFlag = 'QueryTransactionReq' THEN
			CREATE LASTCHILD OF Environment.CbsQTRes DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB CCSID InputRoot.Properties.CodedCharSetId);
		ELSEIF envRef.requestFlag = 'GhIPSSReq' THEN
			CREATE LASTCHILD OF Environment.GhipssRes DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB CCSID InputRoot.Properties.CodedCharSetId);
		ELSEIF envRef.requestFlag = 'ReverseRTServiceReq' THEN
			CREATE LASTCHILD OF Environment.ReverseRTServiceReq DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB CCSID InputRoot.Properties.CodedCharSetId);
		ELSEIF envRef.requestFlag = 'TSQueryReq' THEN
			CREATE LASTCHILD OF Environment.TSQueryReq DOMAIN('XMLNSC') PARSE(InputRoot.BLOB.BLOB CCSID InputRoot.Properties.CodedCharSetId);
		END IF;
	END;
END MODULE;
