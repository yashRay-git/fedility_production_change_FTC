

PATH Fidelity_Bank_GhIPSS_Common,com.fidilitybank.co.zw.common.esql;

DECLARE soapenv NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
DECLARE com NAMESPACE 'com.ghipss.gip';
DECLARE wsse NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd';

CREATE COMPUTE MODULE processRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		DECLARE InputJson REFERENCE TO InputRoot.JSON.Data;

		CREATE FIELD Environment.values;
		DECLARE envValRef REFERENCE TO Environment.values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.msgId = InputJson.channelRef;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		--------Logging Code Start----------
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--------Logging Code End------------

		CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
		DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;

		SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
		SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:com = com;

		CREATE FIELD soapEnvRef.soapenv:Header;
		DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;

		CREATE LASTCHILD OF soapEnvHeader.wsse:Security;
		SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
		SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';

		CREATE LASTCHILD OF soapEnvHeader.wsse:Security.wsse:UsernameToken;
		SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
		SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';

		DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;

		SET UsernameTokenRef.wsse:Username = 'esbtestuser';
		SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute) Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
		SET UsernameTokenRef.wsse:Password = 'fidelity,123';
		SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
		SET UsernameTokenRef.wsse:Nonce = 'PCamrOP55EQorWOZ8zOBHA';
		SET UsernameTokenRef.wsu:Created = '2020-10-28T02:45:11.593Z';

		CREATE LASTCHILD OF soapEnvRef.soapenv:Body.com:GIPTransactionOp.ReqGIPTransaction;
		DECLARE ReqTransactionRef REFERENCE TO soapEnvRef.soapenv:Body.com:GIPTransactionOp.ReqGIPTransaction;
		SET ReqTransactionRef.Amount='000000000000';
		SET ReqTransactionRef.datetime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'YYMMDDHHMMSS');
		SET ReqTransactionRef.TrackingNum = '125278';
		SET ReqTransactionRef.FunctionCode = '200';
		SET ReqTransactionRef.OrigineBank = '300323';
		SET ReqTransactionRef.DestBank = '300315';
		SET ReqTransactionRef.SessionID = InputJson.channelRef;
		SET ReqTransactionRef.ChannelCode = '100';
		SET ReqTransactionRef.AccountToDebit = InputJson.accountToDebit;
		SET ReqTransactionRef.NameToDebit = InputJson.nameToDebit;
		SET ReqTransactionRef.AccountToCredit = InputJson.accountToCredit;
		SET ReqTransactionRef.NameToCredit = InputJson.nameToCredit;
		SET ReqTransactionRef.Narration = 'TEST';
		SET ReqTransactionRef.Login = '300323';
		SET ReqTransactionRef.Password = 'c941a4ec7bd7937a581e42f29d09cdda2b2ece8459db0b07444c20b9c1e6ac9a538275698af192af5634ca3fdae3dd50160dcc14d6f10c754041d7b74f9a84d2';
	
		--------Logging Code Start----------
		SET envValRef.logData = getCastedPayLoad(OutputRoot.XMLNSC,envValRef);
		CALL prepareGhIPSSLogger('GHIPPSRequest',envValRef,OutputRoot);
		--------Logging Code End------------
	END;
END MODULE;

CREATE COMPUTE MODULE processResponse
	CREATE FUNCTION Main ( ) RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		RETURN TRUE;

	END;
	CREATE PROCEDURE CopyEntireMessage( ) BEGIN

		DECLARE inref REFERENCE TO InputRoot.XMLNSC;
		DECLARE ActCode CHARACTER inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.ActCode;

		CREATE FIELD Environment.values;
		DECLARE envValRef REFERENCE TO Environment.values;
		--------Logging Code Start----------
		SET envValRef.logData = getCastedPayLoad(InputRoot.XMLNSC,envValRef);
		CALL prepareGhIPSSLogger('GHIPPSResponse',envValRef,OutputRoot);
		--------Logging Code End------------


		CREATE FIELD OutputRoot.JSON.Data;
		DECLARE outref REFERENCE TO OutputRoot.JSON.Data;

		IF ActCode='000' THEN
			SET outref.channelRef = inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.SessionID;
			SET outref.accountToCredit = inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.AccountToCredit;
			SET outref.nameToCredit = inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.NameToCredit;
			SET outref.actCode = inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.ActCode;
			SET outref.aprvCode = inref.*:Envelope.*:Body.*:GIPTransactionOpResponse.*:GIPTransactionResponse.AprvCode;

		ELSEIF ActCode='114’ ' THEN
			SET outref.transactionStatus ='Invalid Credit Account';
		ELSEIF ActCode='119’ ’ ' THEN
			SET outref.transactionStatus ='Merchant Account not allowed';
		ELSE
			SET outref.transactionStatus ='timeout, please try again';
		END IF;
		--------Logging Code Start----------
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
		--------Logging Code End------------




	END;

END MODULE;