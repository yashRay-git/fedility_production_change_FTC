BROKER SCHEMA Fidelity_Bank_GhIPSS_Common
PATH com.fidilitybank.co.zw.common.esql;
CREATE COMPUTE MODULE SF_Fidelity_Bank_GhIPSS_ExceptionHandler
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		DECLARE inPropRef REFERENCE TO InputRoot.Properties;
		DECLARE loggingData,messageText,errDesc CHARACTER;
		DECLARE statusCode INTEGER;
		DECLARE envValRef REFERENCE TO Environment.values;
		-- CREATE LASTCHILD OF OutputRoot DOMAIN('JSON');
		-- CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		IF EXISTS(InputExceptionList.*[]) THEN
			DECLARE excp REFERENCE TO InputExceptionList.*[1];
			DECLARE excpType CHARACTER FIELDNAME(InputExceptionList.*);
			DECLARE text,actualExcp,number,actualExcpText CHARACTER;
			DECLARE excptext REFERENCE TO excp.Text;
			DECLARE insertRef REFERENCE TO InputExceptionList.*[1];

			WHILE LASTMOVE(excp) DO
				MOVE excp LASTCHILD;
				IF excp.Number is not null THEN
					SET text=excp.Text;
					SET excpType = FIELDNAME(excp);
					DECLARE inserts REFERENCE TO excp.Insert;
					DECLARE texts REFERENCE TO excp.Insert.texts;
					MOVE insertRef TO excp.Insert[>];
					WHILE LASTMOVE(insertRef) AND FIELDNAME(insertRef) = 'Insert' DO
						SET actualExcpText = insertRef.Text;
						IF Environment.dataa is NULL THEN
							SET Environment.dataa = actualExcpText;
						END IF;
						MOVE insertRef NEXTSIBLING;
						IF insertRef.Text <> '' THEN
							SET actualExcp = actualExcpText || insertRef.Text;
							-- SET excpType = text;
						END IF;
					END WHILE;
					SET number = excp.Number;
				END IF;
			END WHILE;
			SET messageText = text ||', ' ||Environment.dataa ||', '||actualExcpText;

			IF CONTAINS(excpType,'Child SQL') THEN
				SET statusCode = '500';
				SET errDesc = 'Internal Server Error';
			ELSEIF CONTAINS(excpType, 'parsing') OR CONTAINS(excpType, 'Parser') THEN
				SET statusCode = '400';
				SET errDesc = 'Bad Request';
			ELSEIF CONTAINS(excpType, 'socket') THEN
				SET statusCode = '500';
				SET errDesc = 'Socket Connection Error';
			ELSE
				SET statusCode = '500';
				SET errDesc = 'Internal Server Error';
			END IF;

		ELSE
			IF EXISTS(InputRoot.XMLNSC[]) THEN
				IF EXISTS(InputRoot.XMLNSC.*:Envelope.*:Body.*:Fault[]) THEN
					SET messageText = InputRoot.XMLNSC.*:Envelope.*:Body.*:Fault.detail.text;
					SET errDesc = 'Time Out Exception';
				ELSE
					SET messageText = CAST(InputRoot.XMLNSC AS CHARACTER CCSID inPropRef.CodedCharSetId ENCODING inPropRef.Encoding);
				END IF;

			ELSEIF EXISTS(InputRoot.JSON[]) THEN
				SET messageText = CAST(InputRoot.JSON.Data AS CHARACTER CCSID inPropRef.CodedCharSetId ENCODING inPropRef.Encoding);
			ELSEIF EXISTS(InputRoot.BLOB[]) THEN
				SET messageText = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID inPropRef.CodedCharSetId ENCODING inPropRef.Encoding);
			END IF;


			SET statusCode = COALESCE(InputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code",InputRoot.HTTPInputHeader."X-Original-HTTP-Status-Code");


			IF CONTAINS(envValRef.application_name,'enrollBiller')OR CONTAINS(envValRef.application_name,'billerPaymentBulkAPI') THEN
				IF CONTAINS(envValRef.application_name,'enrollBiller') THEN
					IF FIELDNAME(Environment.Request.values.*[>]) = 'bulk' THEN
						DECLARE dataRef REFERENCE TO Environment.Request.values.bulk.{Environment.requestIndex};
						IF FIELDVALUE(Environment.Request.values.requestFlag) = 'GhIPSSCall_Blk' THEN
							SET dataRef.status_ghipss = statusCode;
							SET dataRef.errorCode = statusCode;
							SET dataRef.errorDescription = 'Failure';
						ELSE
							SET dataRef.status_cbs = statusCode;
							SET dataRef.errorCode = statusCode;
							SET dataRef.statusDesc_cbs = messageText;
							SET dataRef.errorDescription = 'Failure';
						END IF;
					ELSE
						DECLARE dataRef REFERENCE TO Environment.Request.values.individual;
						IF FIELDVALUE(Environment.Request.values.requestFlag) = 'GhIPSSCall_Ind' THEN
							SET dataRef.status_ghipss = statusCode;
							SET dataRef.errorCode = statusCode;
							SET dataRef.statusDesc_ghipss = SUBSTRING(SUBSTRING(messageText AFTER '"errorDescription":"') BEFORE '"');
						ELSE
							SET dataRef.status_cbs = statusCode;
							SET dataRef.errorCode = statusCode;
							SET dataRef.errorDescription = 'Failure';
						END IF;
					END IF;
				ELSEIF envValRef.application_name = 'billerPaymentBulkAPI' THEN
					CREATE LASTCHILD OF Environment DOMAIN('JSON') PARSE(InputRoot.BLOB.BLOB);
					DECLARE errRef REFERENCE TO Environment.JSON.Data;
					DECLARE envRef REFERENCE TO Environment.GipsRequest;
					DECLARE envValRef REFERENCE TO Environment.values;
					SET envRef.status = 'Failure';
					SET envRef.errorCode = errRef.errorCode;
					SET envRef.errorDescription = errRef.errorDescription;
					--Logging code Start
					SET envValRef.logData = getCastedPayLoad(Environment.JSON,envValRef);
					CALL prepareGhIPSSLogger('GHiPSSResponse',envValRef,OutputRoot);
					--Logging code End
					SET Environment.JSON = NULL;
					IF NOT EXISTS(Environment.ChannelResponse[]) THEN
						CREATE LASTCHILD OF Environment NAME 'ChannelResponse';
					END IF;
					DECLARE dataRef REFERENCE TO Environment.ChannelResponse;
					DECLARE reqRef REFERENCE TO Environment.GipsRequest;
					SET dataRef.{reqRef.billerId}.billerId = reqRef.billerId;
					SET dataRef.{reqRef.billerId}.billId = reqRef.billId;
					SET dataRef.{reqRef.billerId}.errorCode = errRef.errorCode; --statusCode;
					SET dataRef.{reqRef.billerId}.errorDescription = 'Transaction Failure';--SUBSTRING(SUBSTRING(messageText AFTER '"errorDescription":"') BEFORE '"');
					SET dataRef.{reqRef.billerId}.statusCode = statusCode;

				END IF;
				SET OutputRoot.XMLNSC.errlogData.payLoad = messageText;
				SET OutputRoot.XMLNSC.errlogData.msgId = envValRef.msgId;
				SET OutputRoot.XMLNSC.errlogData.serviceName = envValRef.application_name;
				SET OutputRoot.XMLNSC.errlogData.errordescription = COALESCE(errDesc,Environment.errordata.errorDesc,Environment.JSON.Data.errorDescription,'Transaction Failed');
				PROPAGATE TO TERMINAL 'out';
				RETURN FALSE;
			END IF;


			IF statusCode = 500 THEN
				SET Environment.errordata.errorDesc = 'Internal Server Error';
			ELSEIF statusCode = 404 THEN
				SET Environment.errordata.errorDesc = 'Resource Not Found';
			ELSEIF statusCode = 400 THEN
				SET Environment.errordata.errorDesc = 'Bad Request';
			ELSE
				SET Environment.errordata.errorDesc = 'Unknown Exception';
			END IF;

		END IF;
		--send final channel response (start)
		IF (CONTAINS(envValRef.application_name,'payer')) THEN
		ELSE
			SET OutputRoot.JSON.Data.errorCode = statusCode;
			SET OutputRoot.JSON.Data.errorDescription = COALESCE(errDesc,Environment.errordata.errorDesc);
			SET OutputRoot.JSON.Data.actualErrorInformation = messageText;
			SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code" = statusCode;
			PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			SET OutputRoot.JSON = NULL;
		END IF;
		--send final channel response (end)
		-- send message to log data (start)
		SET OutputRoot.XMLNSC.errlogData.payLoad = messageText;
		SET OutputRoot.XMLNSC.errlogData.msgId = envValRef.msgId;
		SET OutputRoot.XMLNSC.errlogData.serviceName = envValRef.application_name;
		SET OutputRoot.XMLNSC.errlogData.errordescription = COALESCE(errDesc,Environment.errordata.errorDesc);
		-- send message to log data (end)
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
--CREATE PROCEDURE prepareErrorLogger(IN OutputRoot REFERENCE, IN message CHARACTER)
--BEGIN
-- SET OutputRoot.XMLNSC.errlogData.payLoad = message;
-- SET OutputRoot.XMLNSC.errlogData.msgId = 'EmptyMsgId';
-- SET OutputRoot.XMLNSC.errlogData.serviceName = 'EmptyServiceName';
-- SET OutputRoot.XMLNSC.errlogData.errordescription = 'EmptyErrordescription';
--END;