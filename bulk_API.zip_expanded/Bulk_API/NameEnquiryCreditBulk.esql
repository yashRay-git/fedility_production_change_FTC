
PATH Fidelity_Bank_GhIPSS_Common, com.fidilitybank.co.zw.common.esql;

DECLARE soapenv NAMESPACE 'http://schemas.xmlsoap.org/soap/envelope/';
DECLARE wsse NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd';
DECLARE wsu NAMESPACE 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-utility-1.0.xsd';
DECLARE com NAMESPACE 'com.ghipss.gip';

CREATE COMPUTE MODULE NameEnquiryCreditBulk_processRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN


		CREATE FIELD Environment.Values;
		DECLARE envValRef REFERENCE TO Environment.Values;
		SET envValRef.application_name = ApplicationLabel;
		SET envValRef.ccsidRef = InputRoot.Properties.CodedCharSetId;
		SET envValRef.encodeRef = InputRoot.Properties.Encoding;
		SET envValRef.msgId = InputRoot.JSON.Data.file.data.Item.channelRef;
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(InputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelRequest',envValRef,OutputRoot);
		--Logging code End


		DECLARE inreq REFERENCE TO InputRoot.JSON.Data.file.data.Item[1];
		IF FIELDNAME(InputRoot.JSON.Data.file.data.Item[1]) IS NOT NULL THEN

			WHILE LASTMOVE(inreq) DO
				SET envValRef.msgId = inreq.channelRef;

				CREATE LASTCHILD OF OutputRoot.XMLNSC.soapenv:Envelope;
				DECLARE soapEnvRef REFERENCE TO OutputRoot.XMLNSC.soapenv:Envelope;

				SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:soapenv = soapenv;
				SET soapEnvRef.(XMLNSC.NamespaceDecl)xmlns:com = com;

				CREATE FIELD soapEnvRef.soapenv:Header;
				DECLARE soapEnvHeader REFERENCE TO soapEnvRef.soapenv:Header;

				CREATE LASTCHILD OF soapEnvHeader.wsse:Security;
				SET soapEnvHeader.wsse:Security.(XMLNSC.NamespaceDecl)xmlns:wsse = wsse;
				SET soapEnvHeader.wsse:Security.(XMLNSC.Attribute)soapenv:mustUnderstand = '1';

				CREATE LASTCHILD OF soapEnvHeader.wsse:Security.wsse:UsernameToken;
				SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.NamespaceDecl)xmlns:wsu = wsu;
				SET soapEnvHeader.wsse:Security.wsse:UsernameToken.(XMLNSC.Attribute)wsu:Id = 'UsernameToken-1';

				DECLARE UsernameTokenRef REFERENCE TO soapEnvHeader.wsse:Security.wsse:UsernameToken;

				SET UsernameTokenRef.wsse:Username = 'esbtestuser';
				SET UsernameTokenRef.wsse:Password.(XMLNSC.Attribute) Type = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-username-token-profile-1.0#PasswordText';
				SET UsernameTokenRef.wsse:Password = 'fidelity,123';
				SET UsernameTokenRef.wsse:Nonce.(XMLNSC.Attribute)EncodingType = 'http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary';
				SET UsernameTokenRef.wsse:Nonce = 'PCamrOP55EQorWOZ8zOBHA';
				SET UsernameTokenRef.wsu:Created = '2020-10-28T02:45:11.593Z';

				CREATE LASTCHILD OF soapEnvRef.soapenv:Body.com:GIPTransactionOp.ReqGIPTransaction;
				DECLARE ReqTransactionRef REFERENCE TO soapEnvRef.soapenv:Body.com:GIPTransactionOp.ReqGIPTransaction;
				SET ReqTransactionRef.Amount = '000000000000';
				SET ReqTransactionRef.datetime = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'YYMMDDHHMMSS');
				SET ReqTransactionRef.TrackingNum = '125278';
				SET ReqTransactionRef.FunctionCode = '230';
				SET ReqTransactionRef.OrigineBank = '300323';
				SET ReqTransactionRef.DestBank = inreq.destBankCode;
				SET ReqTransactionRef.SessionID = inreq.channelRef;
				SET ReqTransactionRef.ChannelCode = '100';
				SET ReqTransactionRef.AccountToDebit = inreq.accountToDebit;
				SET ReqTransactionRef.NameToDebit = inreq.nameToDebit;
				SET ReqTransactionRef.AccountToCredit = inreq.accountToCredit;
				SET ReqTransactionRef.NameToCredit = inreq.nameToCredit;
				SET ReqTransactionRef.Narration = 'TEST';
				SET ReqTransactionRef.Login = '300323';
				SET ReqTransactionRef.Password = 'c941a4ec7bd7937a581e42f29d09cdda2b2ece8459db0b07444c20b9c1e6ac9a538275698af192af5634ca3fdae3dd50160dcc14d6f10c754041d7b74f9a84d2';				
				
				SET Environment.GipsRequest = OutputRoot.XMLNSC;
				--Logging code Start
				SET envValRef.logData = getCastedPayLoad(OutputRoot.XMLNSC,envValRef);
				CALL prepareGhIPSSLogger('GHIPPSRequest',envValRef,OutputRoot);
				--Logging code End                  


				SET OutputRoot.XMLNSC = Environment.GipsRequest;

				PROPAGATE TO TERMINAL 'out1';

				MOVE inreq NEXTSIBLING;

			END WHILE;
		END IF;


		DECLARE gipres REFERENCE TO Environment.Gipsres.*[>];
		CREATE LASTCHILD OF OutputRoot.JSON.Data IDENTITY (JSON.Array) nec_bulk;

		DECLARE outItemRef REFERENCE TO OutputRoot.JSON.Data.nec_bulk;
		DECLARE i INTEGER 1;


		WHILE LASTMOVE(gipres) DO
			IF EXISTS(gipres.transactionStatus[]) THEN
				SET outItemRef.Item[i].transactionStatus = gipres.transactionStatus;
				SET OutputRoot.HTTPResponseHeader."X-Original-HTTP-Status-Code"= '500';

			ELSE
				SET outItemRef.Item[i].channelRef = gipres.SessionID;
				SET outItemRef.Item[i].accountToCredit = gipres.AccountToCredit;
				SET outItemRef.Item[i].nameToCredit = gipres.NameToCredit;
				SET outItemRef.Item[i].actCode = gipres.ActCode;
				SET outItemRef.Item[i].aprvCode = gipres.AprvCode;
			END IF;

			SET i = i + 1;
			MOVE gipres NEXTSIBLING;
		END WHILE;
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(OutputRoot.JSON,envValRef);
		CALL prepareGhIPSSLogger('ChannelResponse',envValRef,OutputRoot);
		--Logging code End



	END;
END MODULE;


CREATE COMPUTE MODULE NameEnquiryCreditBulk_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN false;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN

		DECLARE Gippsresp REFERENCE TO InputRoot.XMLNSC;
		--CREATE FIELD Environment.Values;
		DECLARE envValRef REFERENCE TO Environment.Values;
		--Logging code Start
		SET envValRef.logData = getCastedPayLoad(InputRoot.XMLNSC,envValRef);
		CALL prepareGhIPSSLogger('GHIPPSResponse',envValRef,OutputRoot);
		--Logging code End

		DECLARE ActCode CHARACTER Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.ActCode;
		CREATE FIELD Environment.Gipsres;
		DECLARE envRef REFERENCE TO Environment.Gipsres;



		IF ActCode = '000' THEN
			SET envRef.{Environment.Values.msgId}.SessionID = Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.SessionID;
			SET envRef.{Environment.Values.msgId}.AccountToCredit = Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.AccountToCredit;
			SET envRef.{Environment.Values.msgId}.NameToCredit = Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.NameToCredit;
			SET envRef.{Environment.Values.msgId}.ActCode = Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.ActCode;
			SET envRef.{Environment.Values.msgId}.AprvCode = Gippsresp.*:Envelope.*:Body.*:GIPTransactionOpResponse.GIPTransactionResponse.AprvCode;

		ELSEIF ActCode = '114' THEN
			SET envRef.{Environment.Values.msgId}.transactionStatus = 'Invalid Credit Account';


		ELSEIF ActCode = '119' THEN
			SET envRef.{Environment.Values.msgId}.transactionStatus = 'Merchant Account not allowed';


		ELSE
			SET envRef.{Environment.Values.msgId}.transactionStatus = 'timeout, please try again';
		END IF;

		
	END;
END MODULE;